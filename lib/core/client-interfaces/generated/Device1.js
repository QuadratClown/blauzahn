"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Device1 = exports.XMLObjectData = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DBus = require('dbus-next');

var _require = require('events'),
    EventEmitter = _require.EventEmitter;
/*
 * Generated by dbus-next interface generator
 * Template: javascript-class.js.hbs
 */
// Introspection XML of org.bluez at /org/bluez/*


var XMLObjectData = "<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n<node><interface name=\"org.freedesktop.DBus.Introspectable\"><method name=\"Introspect\"><arg name=\"xml\" type=\"s\" direction=\"out\"/>\n</method></interface><interface name=\"org.bluez.Device1\"><method name=\"Disconnect\"></method><method name=\"Connect\"></method><method name=\"ConnectProfile\"><arg name=\"UUID\" type=\"s\" direction=\"in\"/>\n</method><method name=\"DisconnectProfile\"><arg name=\"UUID\" type=\"s\" direction=\"in\"/>\n</method><method name=\"Pair\"></method><method name=\"CancelPairing\"></method><property name=\"Address\" type=\"s\" access=\"read\"></property><property name=\"AddressType\" type=\"s\" access=\"read\"></property><property name=\"Name\" type=\"s\" access=\"read\"></property><property name=\"Alias\" type=\"s\" access=\"readwrite\"></property><property name=\"Class\" type=\"u\" access=\"read\"></property><property name=\"Appearance\" type=\"q\" access=\"read\"></property><property name=\"Icon\" type=\"s\" access=\"read\"></property><property name=\"Paired\" type=\"b\" access=\"read\"></property><property name=\"Trusted\" type=\"b\" access=\"readwrite\"></property><property name=\"Blocked\" type=\"b\" access=\"readwrite\"></property><property name=\"LegacyPairing\" type=\"b\" access=\"read\"></property><property name=\"RSSI\" type=\"n\" access=\"read\"></property><property name=\"Connected\" type=\"b\" access=\"read\"></property><property name=\"UUIDs\" type=\"as\" access=\"read\"></property><property name=\"Modalias\" type=\"s\" access=\"read\"></property><property name=\"Adapter\" type=\"o\" access=\"read\"></property><property name=\"ManufacturerData\" type=\"a{qv}\" access=\"read\"></property><property name=\"ServiceData\" type=\"a{sv}\" access=\"read\"></property><property name=\"TxPower\" type=\"n\" access=\"read\"></property><property name=\"ServicesResolved\" type=\"b\" access=\"read\"></property></interface><interface name=\"org.freedesktop.DBus.Properties\"><method name=\"Get\"><arg name=\"interface\" type=\"s\" direction=\"in\"/>\n<arg name=\"name\" type=\"s\" direction=\"in\"/>\n<arg name=\"value\" type=\"v\" direction=\"out\"/>\n</method><method name=\"Set\"><arg name=\"interface\" type=\"s\" direction=\"in\"/>\n<arg name=\"name\" type=\"s\" direction=\"in\"/>\n<arg name=\"value\" type=\"v\" direction=\"in\"/>\n</method><method name=\"GetAll\"><arg name=\"interface\" type=\"s\" direction=\"in\"/>\n<arg name=\"properties\" type=\"a{sv}\" direction=\"out\"/>\n</method><signal name=\"PropertiesChanged\"><arg name=\"interface\" type=\"s\"/>\n<arg name=\"changed_properties\" type=\"a{sv}\"/>\n<arg name=\"invalidated_properties\" type=\"as\"/>\n</signal>\n</interface><node name=\"service0001\"/></node>";
/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/*
 * Interface: org.bluez.Device1
 */

exports.XMLObjectData = XMLObjectData;

var Device1 = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2["default"])(Device1, _EventEmitter);

  var _super = _createSuper(Device1);

  (0, _createClass2["default"])(Device1, null, [{
    key: "Connect",
    value: function Connect(bus, objectPath, xml) {
      if (!objectPath) {
        objectPath = "/org/bluez/*";
      }

      if (!xml) {
        xml = XMLObjectData;
      }

      return bus.getProxyObject('org.bluez', objectPath, xml).then(function (obj) {
        return new Device1(obj);
      });
    }
  }]);

  function Device1(dbusObject) {
    var _this;

    (0, _classCallCheck2["default"])(this, Device1);
    _this = _super.call(this);
    _this.dbusInterfaceName = 'org.bluez.Device1';
    _this.dbusObject = dbusObject;
    _this.thisDBusInterface = dbusObject.getInterface('org.bluez.Device1');
    _this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties'); // forward property change events

    var forwardPropertyChange = function forwardPropertyChange(iface, changed, invalidated) {
      if (iface === _this.dbusInterfaceName) {
        _this.emit('PropertiesChanged', iface, changed, invalidated);
      }
    }; // forward all signals


    _this.on("newListener", function (event, listener) {
      if (event === "PropertiesChanged" && _this.listenerCount('PropertiesChanged') === 0) {
        _this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
      } else {
        _this.thisDBusInterface.on(event, listener);
      }
    });

    _this.on("removeListener", function (event, listener) {
      if (event === "PropertiesChanged" && _this.listenerCount('PropertiesChanged') === 0) {
        _this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
      } else {
        _this.thisDBusInterface.removeListener(event, listener);
      }
    });

    return _this;
  }
  /***** Properties *****/


  (0, _createClass2["default"])(Device1, [{
    key: "getProperties",
    value: function getProperties() {
      return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }
  }, {
    key: "getProperty",
    value: function getProperty(name) {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }
  }, {
    key: "setProperty",
    value: function setProperty(name, value) {
      return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    } //@property({ name: 'Address', signature: 's', access: ACCESS_READ })

  }, {
    key: "Address",
    value: function Address() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Address').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'AddressType', signature: 's', access: ACCESS_READ })

  }, {
    key: "AddressType",
    value: function AddressType() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'AddressType').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Name', signature: 's', access: ACCESS_READ })

  }, {
    key: "Name",
    value: function Name() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Name').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Alias', signature: 's', access: ACCESS_READWRITE })

  }, {
    key: "Alias",
    value: function Alias(value) {
      if (value !== undefined) {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Alias', new DBus.Variant("s", value));
      } else {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Alias').then(function (variant) {
          return variant.value;
        });
      }
    } //@property({ name: 'Class', signature: 'u', access: ACCESS_READ })

  }, {
    key: "Class",
    value: function Class() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Class').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Appearance', signature: 'q', access: ACCESS_READ })

  }, {
    key: "Appearance",
    value: function Appearance() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Appearance').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Icon', signature: 's', access: ACCESS_READ })

  }, {
    key: "Icon",
    value: function Icon() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Icon').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Paired', signature: 'b', access: ACCESS_READ })

  }, {
    key: "Paired",
    value: function Paired() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Paired').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Trusted', signature: 'b', access: ACCESS_READWRITE })

  }, {
    key: "Trusted",
    value: function Trusted(value) {
      if (value !== undefined) {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Trusted', new DBus.Variant("b", value));
      } else {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Trusted').then(function (variant) {
          return variant.value;
        });
      }
    } //@property({ name: 'Blocked', signature: 'b', access: ACCESS_READWRITE })

  }, {
    key: "Blocked",
    value: function Blocked(value) {
      if (value !== undefined) {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Blocked', new DBus.Variant("b", value));
      } else {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Blocked').then(function (variant) {
          return variant.value;
        });
      }
    } //@property({ name: 'LegacyPairing', signature: 'b', access: ACCESS_READ })

  }, {
    key: "LegacyPairing",
    value: function LegacyPairing() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'LegacyPairing').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'RSSI', signature: 'n', access: ACCESS_READ })

  }, {
    key: "RSSI",
    value: function RSSI() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'RSSI').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Connected', signature: 'b', access: ACCESS_READ })

  }, {
    key: "Connected",
    value: function Connected() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Connected').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'UUIDs', signature: 'as', access: ACCESS_READ })

  }, {
    key: "UUIDs",
    value: function UUIDs() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'UUIDs').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Modalias', signature: 's', access: ACCESS_READ })

  }, {
    key: "Modalias",
    value: function Modalias() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Modalias').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Adapter', signature: 'o', access: ACCESS_READ })

  }, {
    key: "Adapter",
    value: function Adapter() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Adapter').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'ManufacturerData', signature: 'a{qv}', access: ACCESS_READ })

  }, {
    key: "ManufacturerData",
    value: function ManufacturerData() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ManufacturerData').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'ServiceData', signature: 'a{sv}', access: ACCESS_READ })

  }, {
    key: "ServiceData",
    value: function ServiceData() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ServiceData').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'TxPower', signature: 'n', access: ACCESS_READ })

  }, {
    key: "TxPower",
    value: function TxPower() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'TxPower').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'ServicesResolved', signature: 'b', access: ACCESS_READ })

  }, {
    key: "ServicesResolved",
    value: function ServicesResolved() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ServicesResolved').then(function (variant) {
        return variant.value;
      });
    }
    /***** Methods *****/
    //@method({ name: 'Disconnect', inSignature: '', outSignature: '' })

  }, {
    key: "Disconnect",
    value: function Disconnect() {
      return this.thisDBusInterface.Disconnect();
    } //@method({ name: 'Connect', inSignature: '', outSignature: '' })

  }, {
    key: "Connect",
    value: function Connect() {
      return this.thisDBusInterface.Connect();
    } //@method({ name: 'ConnectProfile', inSignature: 's', outSignature: '' })

  }, {
    key: "ConnectProfile",
    value: function ConnectProfile(UUID) {
      return this.thisDBusInterface.ConnectProfile(UUID);
    } //@method({ name: 'DisconnectProfile', inSignature: 's', outSignature: '' })

  }, {
    key: "DisconnectProfile",
    value: function DisconnectProfile(UUID) {
      return this.thisDBusInterface.DisconnectProfile(UUID);
    } //@method({ name: 'Pair', inSignature: '', outSignature: '' })

  }, {
    key: "Pair",
    value: function Pair() {
      return this.thisDBusInterface.Pair();
    } //@method({ name: 'CancelPairing', inSignature: '', outSignature: '' })

  }, {
    key: "CancelPairing",
    value: function CancelPairing() {
      return this.thisDBusInterface.CancelPairing();
    }
    /***** Signals for org.bluez.Device1 *****/

  }]);
  return Device1;
}(EventEmitter);

exports.Device1 = Device1;