"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GattCharacteristic1 = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DBus = require('dbus-next');

var _require = require('events'),
    EventEmitter = _require.EventEmitter;
/*
 * Generated by dbus-next interface generator
 * Template: javascript-class.js.hbs
 */
// Introspection XML of org.bluez at /org/bluez/*


var XMLObjectData = "<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n<node><interface name=\"org.freedesktop.DBus.Introspectable\"><method name=\"Introspect\"><arg name=\"xml\" type=\"s\" direction=\"out\"/>\n</method></interface><interface name=\"org.bluez.GattCharacteristic1\"><method name=\"ReadValue\"><arg name=\"options\" type=\"a{sv}\" direction=\"in\"/>\n<arg name=\"value\" type=\"ay\" direction=\"out\"/>\n</method><method name=\"WriteValue\"><arg name=\"value\" type=\"ay\" direction=\"in\"/>\n<arg name=\"options\" type=\"a{sv}\" direction=\"in\"/>\n</method><method name=\"AcquireWrite\"><arg name=\"options\" type=\"a{sv}\" direction=\"in\"/>\n<arg name=\"fd\" type=\"h\" direction=\"out\"/>\n<arg name=\"mtu\" type=\"q\" direction=\"out\"/>\n</method><method name=\"AcquireNotify\"><arg name=\"options\" type=\"a{sv}\" direction=\"in\"/>\n<arg name=\"fd\" type=\"h\" direction=\"out\"/>\n<arg name=\"mtu\" type=\"q\" direction=\"out\"/>\n</method><method name=\"StartNotify\"></method><method name=\"StopNotify\"></method><property name=\"UUID\" type=\"s\" access=\"read\"></property><property name=\"Service\" type=\"o\" access=\"read\"></property><property name=\"Value\" type=\"ay\" access=\"read\"></property><property name=\"Notifying\" type=\"b\" access=\"read\"></property><property name=\"Flags\" type=\"as\" access=\"read\"></property><property name=\"WriteAcquired\" type=\"b\" access=\"read\"></property><property name=\"NotifyAcquired\" type=\"b\" access=\"read\"></property></interface><interface name=\"org.freedesktop.DBus.Properties\"><method name=\"Get\"><arg name=\"interface\" type=\"s\" direction=\"in\"/>\n<arg name=\"name\" type=\"s\" direction=\"in\"/>\n<arg name=\"value\" type=\"v\" direction=\"out\"/>\n</method><method name=\"Set\"><arg name=\"interface\" type=\"s\" direction=\"in\"/>\n<arg name=\"name\" type=\"s\" direction=\"in\"/>\n<arg name=\"value\" type=\"v\" direction=\"in\"/>\n</method><method name=\"GetAll\"><arg name=\"interface\" type=\"s\" direction=\"in\"/>\n<arg name=\"properties\" type=\"a{sv}\" direction=\"out\"/>\n</method><signal name=\"PropertiesChanged\"><arg name=\"interface\" type=\"s\"/>\n<arg name=\"changed_properties\" type=\"a{sv}\"/>\n<arg name=\"invalidated_properties\" type=\"as\"/>\n</signal>\n</interface><node name=\"desc0004\"/></node>";
/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/*
 * Interface: org.bluez.GattCharacteristic1
 */

var GattCharacteristic1 = /*#__PURE__*/function (_EventEmitter) {
  (0, _inherits2["default"])(GattCharacteristic1, _EventEmitter);

  var _super = _createSuper(GattCharacteristic1);

  (0, _createClass2["default"])(GattCharacteristic1, null, [{
    key: "Connect",
    value: function Connect(bus, objectPath, xml) {
      if (!objectPath) {
        objectPath = "/org/bluez/*";
      }

      if (!xml) {
        xml = XMLObjectData;
      }

      return bus.getProxyObject('org.bluez', objectPath, xml).then(function (obj) {
        return new GattCharacteristic1(obj);
      });
    }
  }]);

  function GattCharacteristic1(dbusObject) {
    var _this;

    (0, _classCallCheck2["default"])(this, GattCharacteristic1);
    _this = _super.call(this);
    _this.dbusInterfaceName = 'org.bluez.GattCharacteristic1';
    _this.dbusObject = dbusObject;
    _this.thisDBusInterface = dbusObject.getInterface('org.bluez.GattCharacteristic1');
    _this.propertiesDBusInterface = dbusObject.getInterface('org.freedesktop.DBus.Properties'); // forward property change events

    var forwardPropertyChange = function forwardPropertyChange(iface, changed, invalidated) {
      if (iface === _this.dbusInterfaceName) {
        _this.emit('PropertiesChanged', iface, changed, invalidated);
      }
    }; // forward all signals


    _this.on("newListener", function (event, listener) {
      if (event === "PropertiesChanged" && _this.listenerCount('PropertiesChanged') === 0) {
        _this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
      } else {
        _this.thisDBusInterface.on(event, listener);
      }
    });

    _this.on("removeListener", function (event, listener) {
      if (event === "PropertiesChanged" && _this.listenerCount('PropertiesChanged') === 0) {
        _this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
      } else {
        _this.thisDBusInterface.removeListener(event, listener);
      }
    });

    return _this;
  }
  /***** Properties *****/


  (0, _createClass2["default"])(GattCharacteristic1, [{
    key: "getProperties",
    value: function getProperties() {
      return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }
  }, {
    key: "getProperty",
    value: function getProperty(name) {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }
  }, {
    key: "setProperty",
    value: function setProperty(name, value) {
      return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    } //@property({ name: 'UUID', signature: 's', access: ACCESS_READ })

  }, {
    key: "UUID",
    value: function UUID() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'UUID').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Service', signature: 'o', access: ACCESS_READ })

  }, {
    key: "Service",
    value: function Service() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Service').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Value', signature: 'ay', access: ACCESS_READ })

  }, {
    key: "Value",
    value: function Value() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Value').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Notifying', signature: 'b', access: ACCESS_READ })

  }, {
    key: "Notifying",
    value: function Notifying() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Notifying').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'Flags', signature: 'as', access: ACCESS_READ })

  }, {
    key: "Flags",
    value: function Flags() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Flags').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'WriteAcquired', signature: 'b', access: ACCESS_READ })

  }, {
    key: "WriteAcquired",
    value: function WriteAcquired() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'WriteAcquired').then(function (variant) {
        return variant.value;
      });
    } //@property({ name: 'NotifyAcquired', signature: 'b', access: ACCESS_READ })

  }, {
    key: "NotifyAcquired",
    value: function NotifyAcquired() {
      return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'NotifyAcquired').then(function (variant) {
        return variant.value;
      });
    }
    /***** Methods *****/
    //@method({ name: 'ReadValue', inSignature: 'a{sv}', outSignature: 'ay' })

  }, {
    key: "ReadValue",
    value: function ReadValue(options) {
      return this.thisDBusInterface.ReadValue(options);
    } //@method({ name: 'WriteValue', inSignature: 'aya{sv}', outSignature: '' })

  }, {
    key: "WriteValue",
    value: function WriteValue(value, options) {
      return this.thisDBusInterface.WriteValue(value, options);
    } //@method({ name: 'AcquireWrite', inSignature: 'a{sv}', outSignature: 'hq' })

  }, {
    key: "AcquireWrite",
    value: function AcquireWrite(options) {
      return this.thisDBusInterface.AcquireWrite(options);
    } //@method({ name: 'AcquireNotify', inSignature: 'a{sv}', outSignature: 'hq' })

  }, {
    key: "AcquireNotify",
    value: function AcquireNotify(options) {
      return this.thisDBusInterface.AcquireNotify(options);
    } //@method({ name: 'StartNotify', inSignature: '', outSignature: '' })

  }, {
    key: "StartNotify",
    value: function StartNotify() {
      return this.thisDBusInterface.StartNotify();
    } //@method({ name: 'StopNotify', inSignature: '', outSignature: '' })

  }, {
    key: "StopNotify",
    value: function StopNotify() {
      return this.thisDBusInterface.StopNotify();
    }
    /***** Signals for org.bluez.GattCharacteristic1 *****/

  }]);
  return GattCharacteristic1;
}(EventEmitter);

exports.GattCharacteristic1 = GattCharacteristic1;